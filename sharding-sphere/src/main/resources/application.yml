server:
  port: 8000

spring:
  application:
    name: sharding-sphere
  main:
    allow-bean-definition-overriding: true
  shardingsphere:
    datasource:
      names: ds0,ds1
      ds0:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://xxxxxxxx/ds0?characterEncoding=UTF-8&serverTimezone=Asia/Shanghai
        username: root
        password: root
      ds1:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://xxxxxxxx/ds1?characterEncoding=UTF-8&serverTimezone=Asia/Shanghai
        username: root
        password: root
    # 分库分表规则
    sharding:
      tables:
        order:
          actual-data-nodes: ds$->{0}.order_$->{2201..2203}
          table-strategy:
            standard:
              sharding-column: create_time
              # 精确逻辑，插入走这个逻辑
              precise-algorithm-class-name: cn.cocowwy.shardingsphere.algorithm.OrderPreciseShardingAlgorithm
              # 范围逻辑，走这个
              range-algorithm-class-name: cn.cocowwy.shardingsphere.algorithm.OrderRangeShardingAlgorithm
    props:
      sql.show: true  #是否打印sql

logging:
  pattern:
    file: time=%date{yyyy-MM-dd HH:mm:ss.SSS}, level=%p, thread=%t, logger=%logger{0}, %X, %replace(message=[%msg]){'[\r\n]+', ''}%n
    console: time=%date{yyyy-MM-dd HH:mm:ss.SSS}, %highlight(level=%p), %green(thread=%t), %cyan(logger=%logger{0}), %X, %replace(message=[%msg]){'[\r\n]+', ''}%n

